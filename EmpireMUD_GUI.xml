<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- TODO

[/ooc Khufu]: I would show dots as affects with icon, duration, and "x3" for stacks, then mouseover for name, type, damage
sort cooldowns into shortest first
add dots
find a better place for affects
check cooldowns wrap in the right place
icons for stats?
-->

<!-- MuClient version 4.51 -->
<!-- Based heavily on KaVir's EmpireMUD GUI/EmpireHUD GUI for MUSHClient 4.51-->

<muclient>
<plugin
   name="EmpireHUD"
   author="Hitsume"
   id="a0a8aa6fec64eaf933e2120a"
   language="Lua"
   purpose="A MSDP-based GUI for EmpireMUD 2.8+"
   date_written="2015-09-16 07:45:00"
   requires="4.51"
   version="0.9"
   >

</plugin>
<!--  Aliases  -->

<aliases>
<alias script="gui_show" match="gui show" enabled="y" sequence="100" ignore_case="y" />
<alias script="gui_hide" match="gui hide" enabled="y" sequence="100" ignore_case="y" />
<alias script="gui_show" match="gui on" enabled="y" sequence="100" ignore_case="y" />
<alias script="gui_hide" match="gui off" enabled="y" sequence="100" ignore_case="y" />
</aliases>

<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Script  -->

<script>
<![CDATA[
--latest
local using_msdp = false
local background_window = "world_background_image"  -- miniwindow ID
local border_window = "border_image"  -- miniwindow ID
local titlebar_window = "titlebar_image"  -- miniwindow ID
local avatar_window = "avatar_image"  -- miniwindow ID
local bars_window = "bars_image"  -- miniwindow ID
local bars_border_window = "bars_border"  -- miniwindow ID
local minimap_window = "minimap_image"  -- miniwindow ID
local minimap_border_window = "minimap_border"  -- miniwindow ID
local score_window = "score_image"  -- miniwindow ID
local score_border_window = "score_border"  -- miniwindow ID
local health_window = "health_bar"  -- miniwindow ID
local mana_window = "mana_bar"  -- miniwindow ID
local movement_window = "movement_bar"  -- miniwindow ID
local affect_window_prefix = "affect_window_" --miniwindow ID
local cooldown_window_prefix = "cooldown_window_" --miniwindow ID
local blood_window = "blood_bar"  -- miniwindow ID
local gui_on = true
local msdp = {}
local colourGold = ColourNameToRGB("gold")
local colourSilver = ColourNameToRGB("silver")
local colourBlack = ColourNameToRGB("black")
local colourRed = ColourNameToRGB("red")
local colourGreen = ColourNameToRGB("green")
local score_width = 257
local xpbar_width = score_width
local xpbar_height = 14
local primary_energy_bar_x_offset = 34
local primary_energy_bar_y_offset = 75
local energybar_width = score_width
local energybar_offset = 0
local energybar_height = 20
local energybar_spacing = 0

function gui_show (name, line, wildcards)
  gui_on = true
  create_layout()
  -- redraw the score sheet
  draw_score ()
  -- redraw the energy bars
  draw_energy_bars ()
  -- redraw the spell affect icons
  draw_affects ()
  
  Redraw()
--[[
  WindowShow(background_window, true)
  WindowShow(border_window, true)
  WindowShow(titlebar_window, true)
  WindowShow(avatar_window, true)
  WindowShow(bars_window, true)
  WindowShow(bars_border_window, true)
  WindowShow(minimap_window, true)
  WindowShow(minimap_border_window, true)
  WindowShow(score_window, true)
  WindowShow(score_border_window, true)
  WindowShow(health_window, true)
  WindowShow(mana_window, true)
  WindowShow(movement_window, true)
--]]
  ColourNote ("yellow", "", "GUI now shown. Type 'gui hide' to hide it.")
end --gui_show

function gui_hide (name, line, wildcards)
  gui_on = false
  WindowShow(background_window, false)
  WindowShow(border_window, false)
  WindowShow(titlebar_window, false)
  WindowShow(avatar_window, false)
  WindowShow(bars_window, false)
  WindowShow(bars_border_window, false)
  WindowShow(minimap_window, false)
  WindowShow(minimap_border_window, false)
  WindowShow(score_window, false)
  WindowShow(score_border_window, false)
  WindowShow(health_window, false)
  WindowShow(mana_window, false)
  WindowShow(blood_window, false)
  WindowShow(movement_window, false)
  local i = 1
  local status = true
  local error = nil
  --this hack hides affect icons
  while status and i<256 do
--    status, error = pcall(WindowShow(affect_window_prefix..i, false))
    error = WindowShow(affect_window_prefix..i, false)
    i=i+1
  end
  i = 1
  while status and i<256 do
--    status, error = pcall(WindowShow(affect_window_prefix..i, false))
    error = WindowShow(cooldown_window_prefix..i, false)
    i=i+1
  end
  SetBackgroundImage("", 0)
  TextRectangle(
                0,
                0,
                GetInfo (281),
                GetInfo (280),
                1,  -- BorderOffset, 
                colourGold,    -- BorderColour, 
                1,  -- BorderWidth, 
                colourGold,  -- OutsideFillColour, 
                8) -- OutsideFillStyle (fine hatch)
  ColourNote ("yellow", "", "GUI now hidden. Type 'gui show' to show it.")
end --gui_hide

left = 25 -- was 175
top = 73
right_offset = -320
bottom_offset = -20
right = GetInfo (281) + right_offset
bottom = GetInfo (280) + bottom_offset  -- 32 pixels from bottom

-- create the layout here, on getting the prompt, or window resize
function create_layout ()
  if not gui_on then return end
 
  right = GetInfo (281) + right_offset
  bottom = GetInfo (280) + bottom_offset

  -- if its less than this, we lose the map
  min_width = 50 + GetInfo (213) * 81 -- offset + width for 81 characters
  if right < min_width then
    right = min_width
  end -- if

  -- avoid the plugin crashing if someone makes the window stupidly small
  if bottom < top then
    bottom = top
  end -- if

  ----------------------------------------------------------------------------
  -- Set the background, using the textured tile.
  ----------------------------------------------------------------------------

  SetBackgroundImage(GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/outer_background.png", 13)

  ----------------------------------------------------------------------------
  -- Set the main text area.
  ----------------------------------------------------------------------------

  -- tell the client where to draw the text
  TextRectangle(left+13,  
                top+13,   
                right-13,
                bottom-13,  
                1,  -- BorderOffset, 
                colourGold,    -- BorderColour, 
                1,  -- BorderWidth, 
                colourGold,  -- OutsideFillColour, 
                8) -- OutsideFillStyle (fine hatch)

  ----------------------------------------------------------------------------
  -- Create a black window over the text area, behind the text.
  ----------------------------------------------------------------------------

  -- make a miniwindow under the text
  if WindowCreate (border_window,   -- window ID
                left-5, 
                top-5,   
                right - left + 10, -- width
                bottom - top + 10, -- depth
                12,  -- center it (ignored anyway) 
                3,   -- draw underneath (1) + absolute location (2)
                0x000000) ~= eOK then
    -- problem creating the window.  Not sure why this happens, but it some 
    -- players have encountered a depth of -3, which causes the plugin to crash.
    return
  end -- if

  -- show the window
--  WindowShow (border_window, true)


  -- make a miniwindow under the text
  if WindowCreate (background_window,   -- window ID
                left-4, 
                top-4,   
                right - left + 8, -- width
                bottom - top + 8, -- depth
                12,  -- center it (ignored anyway) 
                3,   -- draw underneath (1) + absolute location (2)
                0x000000) ~= eOK then
    -- problem creating the window.  Not sure why this happens, but it some 
    -- players have encountered a depth of -3, which causes the plugin to crash.
    return
  end -- if

  -- load the paper background image
  if WindowLoadImage (background_window, "background_background", GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/inner_background.png") == eOK then
    check (WindowDrawImage (background_window, "background_background", 0, 0, 0, 0, 1))  -- draw it
  else -- the file is missing
    Note( "File '" .. GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/inner_background.png' is missing.")
  end -- if


  -- load the left border image
  if WindowLoadImage (background_window, "border_left", GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/border_left.png") == eOK then
    check (WindowDrawImage (background_window, "border_left", 0, 0, 0, 0, 1))  -- draw it
  else -- the file is missing
    Note( "File '" .. GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/border_left.png' is missing.")
  end -- if

  -- load the right border image
  if WindowLoadImage (background_window, "border_right", GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/border_right.png") == eOK then
    check (WindowDrawImage (background_window, "border_right", right-left-7, 0, 0, 0, 1))  -- draw it
  else -- the file is missing
    Note( "File '" .. GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/border_right.png' is missing.")
  end -- if

  -- load the top border image
  if WindowLoadImage (background_window, "border_top", GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/border_top.png") == eOK then
    check (WindowDrawImage (background_window, "border_top", 0, 0, 0, 0, 1))  -- draw it
  else -- the file is missing
    Note( "File '" .. GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/border_top.png' is missing.")
  end -- if

  -- load the bottom border image
  if WindowLoadImage (background_window, "border_bottom", GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/border_bottom.png") == eOK then
    check (WindowDrawImage (background_window, "border_bottom", 0, bottom-top-7, 0, 0, 1))  -- draw it
  else -- the file is missing
    Note( "File '" .. GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/border_top.png' is missing.")
  end -- if

  -- load the top right corner image
  if WindowLoadImage (background_window, "corner_tr", GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/corner_tr.png") == eOK then
    check (WindowDrawImage (background_window, "corner_tr", right-left-7, 0, 0, 0, 1))  -- draw it
  else -- the file is missing
    Note( "File '" .. GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/corner_tr.png' is missing.")
  end -- if

  -- load the bottom right corner image
  if WindowLoadImage (background_window, "corner_br", GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/corner_br.png") == eOK then
    check (WindowDrawImage (background_window, "corner_br", right-left-7, bottom-top-7, 0, 0, 1))  -- draw it
  else -- the file is missing
    Note( "File '" .. GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/corner_br.png' is missing.")
  end -- if

  -- show the window
  WindowShow (background_window, true)

  ----------------------------------------------------------------------------
  -- Create the EmpireHUD title at the top of the screen.
  ----------------------------------------------------------------------------

  width_of_title_image = 358

  title_x = (GetInfo (281) - width_of_title_image) / 2

  -- make a miniwindow to the left of the text
  check (WindowCreate (titlebar_window,   -- window ID
                title_x,   -- left
                0,   -- top
                981, -- width
                187, -- depth
                12,  -- center it (ignored anyway) 
                7,          -- draw underneath (1) + absolute location (2) + transparent (4)
                0x000000))  -- background colour

  -- load the titlebar image
  check (WindowLoadImage (titlebar_window, "titlebar", GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/Title.png"))

  -- draw it
  check (WindowDrawImage (titlebar_window, "titlebar", 0, -20, 0, 0, 3))  -- draw it

  -- show the window
  WindowShow (titlebar_window, true)

  ----------------------------------------------------------------------------
  -- Create the bars window to the left of the text.
  ----------------------------------------------------------------------------
--[[
  -- make a miniwindow for the graphical border
  check (WindowCreate (bars_border_window,   -- window ID
                14,         -- left
                top-4,      -- top
                142,        -- width
                142,        -- depth
                12,         -- center it (ignored anyway) 
                2,          -- draw underneath (1) + absolute location (2)
                0x000000))  -- background colour

  -- make a miniwindow for the map
  check (WindowCreate (bars_window,   -- window ID
                29,         -- left
                top+11,     -- top
                112,        -- width
                112,        -- depth
                12,         -- center it (ignored anyway) 
                2,          -- draw underneath (1) + absolute location (2)
                0x000000))  -- background colour

  -- load the left border image
  if WindowLoadImage (bars_border_window, "border_left", GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/border_left.png") == eOK then
    check (WindowDrawImage (bars_border_window, "border_left", 0, 0, 0, 0, 1))  -- draw it
  else -- the file is missing
    Note( "File '" .. GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/border_left.png' is missing.")
  end -- if

  -- load the right border image
  if WindowLoadImage (bars_border_window, "border_right", GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/border_right.png") == eOK then
    check (WindowDrawImage (bars_border_window, "border_right", 110+17, 0, 0, 0, 1))  -- draw it
  else -- the file is missing
    Note( "File '" .. GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/border_right.png' is missing.")
  end -- if

  -- load the top border image
  if WindowLoadImage (bars_border_window, "border_top", GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/border_top.png") == eOK then
    check (WindowDrawImage (bars_border_window, "border_top", 0, 0, 0, 0, 1))  -- draw it
  else -- the file is missing
    Note( "File '" .. GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/border_top.png' is missing.")
  end -- if

  -- load the bottom border image
  if WindowLoadImage (bars_border_window, "border_bottom", GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/border_bottom.png") == eOK then
    check (WindowDrawImage (bars_border_window, "border_bottom", 0, 110+17, 0, 0, 1))  -- draw it
  else -- the file is missing
    Note( "File '" .. GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/border_top.png' is missing.")
  end -- if

  -- load the top right corner image
  if WindowLoadImage (bars_border_window, "corner_tr", GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/corner_tr.png") == eOK then
    check (WindowDrawImage (bars_border_window, "corner_tr", 110+17, 0, 0, 0, 1))  -- draw it
  else -- the file is missing
    Note( "File '" .. GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/corner_tr.png' is missing.")
  end -- if

  -- load the bottom right corner image
  if WindowLoadImage (bars_border_window, "corner_br", GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/corner_br.png") == eOK then
    check (WindowDrawImage (bars_border_window, "corner_br", 110+17, 110+17, 0, 0, 1))  -- draw it
  else -- the file is missing
    Note( "File '" .. GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/corner_br.png' is missing.")
  end -- if

  -- load the paper background image
  if WindowLoadImage (bars_window, "bars_background", GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/inner_background.png") == eOK then
    check (WindowDrawImage (bars_window, "bars_background", 0, 0, 0, 0, 1))  -- draw it
  else -- the file is missing
    Note( "File '" .. GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/inner_background.png' is missing.")
  end -- if

  -- show the window and its border
  WindowShow (bars_border_window, true)
  WindowShow (bars_window, true)
--]]
  ----------------------------------------------------------------------------
  -- Create the minimap window to the left of the text.
  ----------------------------------------------------------------------------
--[[
  -- make a miniwindow for the graphical border
  check (WindowCreate (minimap_border_window,   -- window ID
                14,         -- left
                top+153,    -- top
                142,        -- width
                142,        -- depth
                12,         -- center it (ignored anyway) 
                2,          -- draw underneath (1) + absolute location (2)
                0x000000))  -- background colour

  -- make a miniwindow for the map
  check (WindowCreate (minimap_window,   -- window ID
                29,         -- left
                top+168,    -- top
                112,        -- width
                112,        -- depth
                12,         -- center it (ignored anyway) 
                2,          -- draw underneath (1) + absolute location (2)
                0x000000))  -- background colour

  -- load the left border image
  if WindowLoadImage (minimap_border_window, "border_left", GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/border_left.png") == eOK then
    check (WindowDrawImage (minimap_border_window, "border_left", 0, 0, 0, 0, 1))  -- draw it
  else -- the file is missing
    Note( "File '" .. GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/border_left.png' is missing.")
  end -- if

  -- load the right border image
  if WindowLoadImage (minimap_border_window, "border_right", GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/border_right.png") == eOK then
    check (WindowDrawImage (minimap_border_window, "border_right", 110+17, 0, 0, 0, 1))  -- draw it
  else -- the file is missing
    Note( "File '" .. GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/border_right.png' is missing.")
  end -- if

  -- load the top border image
  if WindowLoadImage (minimap_border_window, "border_top", GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/border_top.png") == eOK then
    check (WindowDrawImage (minimap_border_window, "border_top", 0, 0, 0, 0, 1))  -- draw it
  else -- the file is missing
    Note( "File '" .. GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/border_top.png' is missing.")
  end -- if

  -- load the bottom border image
  if WindowLoadImage (minimap_border_window, "border_bottom", GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/border_bottom.png") == eOK then
    check (WindowDrawImage (minimap_border_window, "border_bottom", 0, 110+17, 0, 0, 1))  -- draw it
  else -- the file is missing
    Note( "File '" .. GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/border_top.png' is missing.")
  end -- if

  -- load the top right corner image
  if WindowLoadImage (minimap_border_window, "corner_tr", GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/corner_tr.png") == eOK then
    check (WindowDrawImage (minimap_border_window, "corner_tr", 110+17, 0, 0, 0, 1))  -- draw it
  else -- the file is missing
    Note( "File '" .. GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/corner_tr.png' is missing.")
  end -- if

  -- load the bottom right corner image
  if WindowLoadImage (minimap_border_window, "corner_br", GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/corner_br.png") == eOK then
    check (WindowDrawImage (minimap_border_window, "corner_br", 110+17, 110+17, 0, 0, 1))  -- draw it
  else -- the file is missing
    Note( "File '" .. GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/corner_br.png' is missing.")
  end -- if

  -- load the paper background image
  if WindowLoadImage (minimap_window, "minimap_background", GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/inner_background.png") == eOK then
    check (WindowDrawImage (minimap_window, "minimap_background", 0, 0, 0, 0, 1))  -- draw it
  else -- the file is missing
    Note( "File '" .. GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/inner_background.png' is missing.")
  end -- if

  -- show the window and its border
  WindowShow (minimap_border_window, true)
  WindowShow (minimap_window, true)

  -- load the terrain images
  check (WindowLoadImage (minimap_window, "terrain_city", GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/maps/terrain_city.bmp"))
  check (WindowLoadImage (minimap_window, "terrain_dark", GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/maps/terrain_dark.bmp"))

  -- draw the map
  draw_minimap ()
--]]
  ----------------------------------------------------------------------------
  -- Create the score window to the right of the text.
  ----------------------------------------------------------------------------

  -- make a miniwindow for the graphical border
  check (WindowCreate (score_border_window,   -- window ID
                right+19,   -- left
                top-4,      -- top
                287,        -- width
                bottom - top + 8, -- depth
                12,         -- center it (ignored anyway) 
                2,          -- draw underneath (1) + absolute location (2)
                0x000000))  -- background colour

  -- make a miniwindow for the inner area
  check (WindowCreate (score_window,   -- window ID
                right+34,   -- left
                top+11,     -- top
                score_width,-- width
                bottom - top - 22, -- depth
                12,         -- center it (ignored anyway) 
                2,          -- draw underneath (1) + absolute location (2)
                0x000000))  -- background colour
  --add hotspots
  WindowAddHotspot(score_window, "hs_terr", 0, 0, 1, 1, "", "", "", "", "", "Territory", 12, 0);
  WindowAddHotspot(score_window, "hs_str", 0, 0, 1, 1, "", "", "", "", "", "Strength", 12, 0);
  WindowAddHotspot(score_window, "hs_dex", 0, 0, 1, 1, "", "", "", "", "", "Dexterity", 12, 0);
  WindowAddHotspot(score_window, "hs_int", 0, 0, 1, 1, "", "", "", "", "", "Intelligence", 12, 0);
  WindowAddHotspot(score_window, "hs_wit", 0, 0, 1, 1, "", "", "", "", "", "Wits", 12, 0);
  WindowAddHotspot(score_window, "hs_cha", 0, 0, 1, 1, "", "", "", "", "", "Charisma", 12, 0);
  WindowAddHotspot(score_window, "hs_grt", 0, 0, 1, 1, "", "", "", "", "", "Greatness", 12, 0);
  WindowAddHotspot(score_window, "hs_tohit", 0, 0, 1, 1, "", "", "", "", "", "To-hit", 12, 0);
  WindowAddHotspot(score_window, "hs_dodge", 0, 0, 1, 1, "", "", "", "", "", "Dodge", 12, 0);
  WindowAddHotspot(score_window, "hs_block", 0, 0, 1, 1, "", "", "", "", "", "Block", 12, 0);
  WindowAddHotspot(score_window, "hs_resist", 0, 0, 1, 1, "", "", "", "", "", "Resist", 12, 0);
  WindowAddHotspot(score_window, "hs_phys", 0, 0, 1, 1, "", "", "", "", "", "Bonus-Physical", 12, 0);
  WindowAddHotspot(score_window, "hs_magic", 0, 0, 1, 1, "", "", "", "", "", "Bonus-Magical", 12, 0);
  WindowAddHotspot(score_window, "hs_heal", 0, 0, 1, 1, "", "", "", "", "", "Bonus-Healing", 12, 0);
  
  -- load the left border image
  if WindowLoadImage (score_border_window, "border_left", GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/border_left.png") == eOK then
    check (WindowDrawImage (score_border_window, "border_left", 0, 0, 0, 0, 1))  -- draw it
  else -- the file is missing
    Note( "File '" .. GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/border_left.png' is missing.")
  end -- if

  -- load the right border image
  if WindowLoadImage (score_border_window, "border_right", GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/border_right.png") == eOK then
    check (WindowDrawImage (score_border_window, "border_right", 145+110+17, 0, 0, 0, 1))  -- draw it
  else -- the file is missing
    Note( "File '" .. GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/border_right.png' is missing.")
  end -- if

  -- load the top border image
  if WindowLoadImage (score_border_window, "border_top", GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/border_top.png") == eOK then
    check (WindowDrawImage (score_border_window, "border_top", 0, 0, 0, 0, 1))  -- draw it
  else -- the file is missing
    Note( "File '" .. GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/border_top.png' is missing.")
  end -- if

  -- load the bottom border image
  if WindowLoadImage (score_border_window, "border_bottom", GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/border_bottom.png") == eOK then
    check (WindowDrawImage (score_border_window, "border_bottom", 0, bottom - top - 7, 0, 0, 1))  -- draw it
  else -- the file is missing
    Note( "File '" .. GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/border_top.png' is missing.")
  end -- if

  -- load the top right corner image
  if WindowLoadImage (score_border_window, "corner_tr", GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/corner_tr.png") == eOK then
    check (WindowDrawImage (score_border_window, "corner_tr", 145+110+17, 0, 0, 0, 1))  -- draw it
  else -- the file is missing
    Note( "File '" .. GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/corner_tr.png' is missing.")
  end -- if

  -- load the bottom right corner image
  if WindowLoadImage (score_border_window, "corner_br", GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/corner_br.png") == eOK then
    check (WindowDrawImage (score_border_window, "corner_br", 145+110+17, bottom - top - 7, 0, 0, 1))  -- draw it
  else -- the file is missing
    Note( "File '" .. GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/corner_br.png' is missing.")
  end -- if

  -- load the paper background image
  if WindowLoadImage (score_window, "score_background", GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/inner_background.png") == eOK then
    check (WindowDrawImage (score_window, "score_background", 0, 0, 0, 0, 1))  -- draw it
  else -- the file is missing
    Note( "File '" .. GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/layout/inner_background.png' is missing.")
  end -- if

  -- load the avatar image
  if WindowLoadImage (score_window, "avatar", GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/avatars/Default.png") ~= eOK then
    Note( "File '" .. GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/avatars/Default.png' is missing.")
  end -- if

  -- fill in the window
  draw_score ()

  -- draw the spell affect icons
  draw_affects ()
  
  -- show the window and its border
  WindowShow (score_border_window, true)
  WindowShow (score_window, true)

  ----------------------------------------------------------------------------
  -- Create the actual health, mana and movement bars' windows.
  ----------------------------------------------------------------------------

  -- make a miniwindow under the text
  check (WindowCreate (health_window,   -- window ID
                right+primary_energy_bar_x_offset+energybar_offset,      -- left
                top+primary_energy_bar_y_offset,        -- top
                energybar_width,   -- width
                energybar_height,            -- depth
                12,            -- center it (ignored anyway) 
                2,             -- draw underneath (1) + absolute location (2)
                colourBlack))  -- background colour

  -- show the window
  WindowShow (health_window, true)
  WindowSetZOrder (health_window, 20) --draw on top of other windows
  WindowAddHotspot(health_window, "hs_tooltip", 0, 0, energybar_width, energybar_height, "", "", "", "", "", "This is a tooltip!", 12, 0)
  
  -- make a miniwindow under the text
  check (WindowCreate (mana_window,   -- window ID
                right+primary_energy_bar_x_offset+energybar_offset,      -- left
                top+primary_energy_bar_y_offset+energybar_height+energybar_spacing,        -- top
                energybar_width,   -- width
                energybar_height,            -- depth
                12,            -- center it (ignored anyway) 
                2,             -- draw underneath (1) + absolute location (2)
                colourBlack))  -- background colour

  -- show the window
  WindowShow (mana_window, true)
  WindowSetZOrder (mana_window, 20)
  WindowAddHotspot(mana_window, "hs_tooltip", 0, 0, energybar_width, energybar_height, "", "", "", "", "", "This is a tooltip!", 12, 0)
  
  -- make a miniwindow under the text
  check (WindowCreate (movement_window,   -- window ID
                right+primary_energy_bar_x_offset+energybar_offset,      -- left
                top+primary_energy_bar_y_offset+(energybar_height+energybar_spacing)*2,       -- top
                energybar_width,   -- width
                energybar_height,            -- depth
                12,            -- center it (ignored anyway) 
                2,             -- draw underneath (1) + absolute location (2)
                colourBlack))  -- background colour

  -- show the window
  WindowShow (movement_window, true)
  WindowSetZOrder (movement_window, 20)
  WindowAddHotspot(movement_window, "hs_tooltip", 0, 0, energybar_width, energybar_height, "", "", "", "", "", "This is a tooltip!", 12, 0)
  
  -- make a miniwindow under the text
  check (WindowCreate (blood_window,   -- window ID
                right+primary_energy_bar_x_offset+energybar_offset,            -- left
                top+primary_energy_bar_y_offset+(energybar_height+energybar_spacing)*3,           -- top
                energybar_width,   -- width
                energybar_height,            -- depth
                12,            -- center it (ignored anyway) 
                2,             -- draw underneath (1) + absolute location (2)
                colourBlack))  -- background colour

  -- show the window
  WindowShow (blood_window, true)
  WindowSetZOrder (blood_window, 20)
  WindowAddHotspot(blood_window, "hs_tooltip", 0, 0, energybar_width, energybar_height, "", "", "", "", "", "This is a tooltip!", 12, 0)
  -- draw the energy bars
  draw_energy_bars ()

end -- create_layout


function OnPluginWorldOutputResized ()
  create_layout ()
end -- function


local RoomExit = {}
local RoomType = {}
local ExitCount = 0

function init_rooms (data)

  ExitCount = 0

  index = 0
  startpos = 1
  max = 0
  for i=startpos,string.len(data),1 do
    if string.byte(data,i) == 1 or i == string.len(data) then
      if string.byte(data,i) == 1 then
        endpos = 1
      else
        endpos = 0
      end -- if
      variable = string.sub(data,startpos,i-endpos)
      startpos = i+1
      index = index + 1

      pos1 = string.find(variable, "\002")
      if pos1 ~= nil then
        RoomExit[index] = string.sub(variable, 1, pos1-1)
        RoomType[index] = string.sub(variable, pos1+1)
        ExitCount = ExitCount + 1
      end -- if
    end -- if
  end -- for

end -- function


-- draw one room
function draw_room (x, y, type)

  terrain_image = "terrain_dark"
  if type == "O" then
    terrain_image = "terrain_city"
  end -- if

  WindowCircleOp (minimap_window, 2, x-1, y-1, x+22, y+22, colourGold, 0, 2, 0, 1)
  WindowCircleOp (minimap_window, 2, x-1, y-1, x+21, y+21, colourBlack, 0, 1, 0, 1)
  WindowDrawImage (minimap_window, terrain_image, x, y, x+20, y+20, 1)  -- draw the terrain

end -- draw_room


-- draw the minimap
function draw_minimap ()

  data = msdp["ROOM_EXITS"]

  if data ~= nil then
    init_rooms (data)
  end -- if

  mapCentre = 45

  -- clean the background and redraw the central room
  check (WindowDrawImage (minimap_window, "minimap_background", 0, 0, 0, 0, 1))  -- draw it
  draw_room (mapCentre, mapCentre, "O")

  -- draw any surrounding rooms
  if ExitCount > 0 then
    for i=1,ExitCount,1 do
      if RoomExit[i] == "north" then
        draw_room(mapCentre, mapCentre-30, RoomType[i])
        WindowLine(minimap_window, mapCentre+9, mapCentre-2, mapCentre+9, mapCentre-10, colourGold, 0, 1)
        WindowLine(minimap_window, mapCentre+10, mapCentre-2, mapCentre+10, mapCentre-10, colourGold, 0, 1)
      elseif RoomExit[i] == "south" then
        draw_room(mapCentre, mapCentre+30, RoomType[i])
        WindowLine(minimap_window, mapCentre+9, mapCentre+28, mapCentre+9, mapCentre+20, colourGold, 0, 1)
        WindowLine(minimap_window, mapCentre+10, mapCentre+28, mapCentre+10, mapCentre+20, colourGold, 0, 1)
      elseif RoomExit[i] == "east" then
        draw_room(mapCentre+30, mapCentre, RoomType[i])
        WindowLine(minimap_window, mapCentre+22, mapCentre+9, mapCentre+28, mapCentre+9, colourGold, 0, 1)
        WindowLine(minimap_window, mapCentre+22, mapCentre+10, mapCentre+28, mapCentre+10, colourGold, 0, 1)
      elseif RoomExit[i] == "west" then
        draw_room(mapCentre-30, mapCentre, RoomType[i])
        WindowLine(minimap_window, mapCentre-3, mapCentre+9, mapCentre-10, mapCentre+9, colourGold, 0, 1)
        WindowLine(minimap_window, mapCentre-3, mapCentre+10, mapCentre-10, mapCentre+10, colourGold, 0, 1)
      end -- if
    end -- for
  end -- if

end -- draw_minimap


-- fill the three energy bars
function draw_energy_bars ()

  -- HEALTH
  current_health = msdp["HEALTH"]
  max_health = msdp["HEALTH_MAX"]
  health_regen = msdp["HEALTH_REGEN"]

  -- initialise with empty bars
  if current_health == nil then
    current_health = 0
    max_health = 0
  end -- if

  if current_health ~= nil and max_health ~= nil then
    type = "Health"
    colour = 0x0000AA
    colour2 = 0x000033
	colour3 = 0x0000FF
    draw_energy_bar(type, colour, colour2, colour3, health_window, current_health, max_health, last_health, health_regen)
  end -- if
  --update the "previous value"

  if last_health == nil or os.time()-last_health_time>=1 then
    last_health = current_health
  end
  last_health_time = os.time()
  
  -- MANA
  current_mana = msdp["MANA"]
  max_mana = msdp["MANA_MAX"]
  mana_regen = msdp["MANA_REGEN"]

  -- initialise with empty bars
  if current_mana == nil then
    current_mana = 0
    max_mana = 0
  end -- if

  if current_mana ~= nil and max_mana ~= nil then
    type = "Mana"
    colour = 0xAA0000
    colour2 = 0x330000
	colour3 = 0xFF0000
    draw_energy_bar(type, colour, colour2, colour3, mana_window, current_mana, max_mana, last_mana, mana_regen)
  end -- if
  --update the "previous time"

  if last_mana == nil or os.time()-last_mana_time>=1 then
    last_mana = current_mana
  end
  last_mana_time = os.time()
  
  -- MOVEMENT
  current_movement = msdp["MOVEMENT"]
  max_movement = msdp["MOVEMENT_MAX"]
  movement_regen = msdp["MOVEMENT_REGEN"]
  
  -- initialise with empty bars
  if current_movement == nil then
    current_movement = 0
    max_movement = 0
  end -- if

  if current_movement ~= nil and max_movement ~= nil then
    type = "Move"
    colour = 0x00AA00
    colour2 = 0x003300
	colour3 = 0x00FF00
    draw_energy_bar(type, colour, colour2, colour3, movement_window, current_movement, max_movement, last_movement, movement_regen)
  end -- if
  --update the "previous value"

  if last_movement == nil or os.time()-last_movement_time>=1 then
    last_movement = current_movement
  end
  last_movement_time = os.time()
  
  -- Blood
  current_blood = msdp["BLOOD"]
  max_blood = msdp["BLOOD_MAX"]
  if msdp["BLOOD_UPKEEP"]~= nil then
    blood_regen = ""..tonumber(msdp["BLOOD_UPKEEP"]) * -1
  end
  
  -- initialise with empty bars
  if current_blood == nil then
    current_blood = 0
    max_blood = 0
  end -- if

  if current_blood ~= nil and max_blood ~= nil and msdp["VAMPIRE_LEVEL"] ~= nil and msdp["VAMPIRE_LEVEL"] ~= 0 then
    type = "Blood"
    colour = 0x0000CC
    colour2 = 0x000033
	colour3 = 0x3333AA
    draw_energy_bar(type, colour, colour2, colour3, blood_window, current_blood, max_blood, last_blood, blood_regen)
  end -- if
  
  --update the "previous value"
  if last_blood == nil or os.time()-last_blood_time>=1 then
    last_blood = current_blood
  end
  last_blood_time = os.time()

end -- draw_energy_bars

function draw_mini_bar (colour, colour2, window, x_offset, y_offset, width, height, current_value, max_value)
  current = tonumber(current_value)
  max = tonumber(max_value)

  WindowGradient (window, x_offset, y_offset-1, width+x_offset, y_offset+height/2, colourBlack, colour2, 2)
  WindowGradient (window,  x_offset, y_offset+height/2, width+x_offset, y_offset+height+1, colour2, colourBlack, 2)

  if max > 0 then
    filled = current / max
  else -- avoid division by zero
    filled = 0
  end -- if
  -- redraw the bars
  if current > 0 then
    --ceil is required to avoid very nearly empty bars appearing full
	--(if filled is small enough to make filled*width a fraction)
    WindowGradient (window, x_offset, y_offset-1, math.ceil(filled*width)+x_offset, y_offset+height/2, colourBlack, colour, 2)
    WindowGradient (window, x_offset, y_offset+height/2, math.ceil(filled*width)+x_offset, y_offset+height+1, colour, colourBlack, 2)
  end
end

function draw_xp_bar (skill, colour, colour2, window, x_offset, y_offset, current_value, max_value, level_value)
  -- convert the strings to numbers
--  Note(current_value.."/"..max_value)
  current = tonumber(current_value)
  max = tonumber(max_value)
  if level_value==nil then level_value = "0" end
  level = tonumber(level_value)
  -- Apply limits
  if current < 0 then
    current = 0
  elseif current > max then
    current = max
  end -- if
  -- clear the bars
  local height = xpbar_height
  WindowGradient (window, x_offset, y_offset-1, xpbar_width+x_offset, y_offset+height/2, colourBlack, colour2, 2)
  WindowGradient (window, x_offset, y_offset+height/2, xpbar_width+x_offset, y_offset+height+1, colour2, colourBlack, 2)
  
  -- calculate the filled part
  if max > 0 then
    filled = current / max
  else -- avoid division by zero
    filled = 0
  end -- if
--  Note(skill..":"..filled..":"..(filled*xpbar_width))
  -- redraw the bars
  if current > 0 then
    --ceil is required to avoid very nearly empty bars appearing full
	--(if filled is small enough to make filled*xpbar_width a fraction)
    WindowGradient (window, x_offset, y_offset-1, math.ceil(filled*xpbar_width)+x_offset, y_offset+height/2, colourBlack, colour, 2)
    WindowGradient (window, x_offset, y_offset+height/2, math.ceil(filled*xpbar_width)+x_offset, y_offset+height+1, colour, colourBlack, 2)
  end
  
  -- write the information inside
  outlined_text (colourGold, window, level, 8, x_offset+27, y_offset+(height-14)/2, 0, true) --level
  outlined_text (colourGold, window, skill, 8, x_offset+33, y_offset+(height-14)/2, 0) --skill
  outlined_text (colourGold, window, (math.ceil(filled*1000)/10)..'%', 8, x_offset+xpbar_width-3, y_offset+(height-14)/2, 0, true) --xp%
  
end --of draw_xp_bar

-- fill the bar
function draw_energy_bar (type, colour, colour2, colour3, window, current_value, max_value, previous_value, regen)

  -- convert the strings to numbers
  current = tonumber(current_value)
  max = tonumber(max_value)
  if previous_value == nil then previous_value = "0" end
  if regen == nil then regen = "0" end
  --Note(type..", "..current_value..", "..max_value..", "..previous_value)
  previous = tonumber(previous_value)
  -- Apply limits
  
  if current < 0 then
    current = 0
  elseif current > max then
    current = max
  end -- if
  -- Apply limits
  if previous < 0 then previous = 0 elseif previous > max then previous = max end
  -- clear the bars
  local offset = 0
  local height = energybar_height
  WindowGradient (window, offset, -1, energybar_width+offset, height/2, colourBlack, colour2, 2)
  WindowGradient (window, offset, height/2, energybar_width+offset, height+1, colour2, colourBlack, 2)

  -- calculate the filled part
  if max > 0 then
    filled = math.min(current,previous) / max
	filled2 = math.max(current,previous) / max
	percent = current/max*100
  else -- avoid division by zero
    filled = 0
	filled2 = 0
	percent = 0
  end -- if
  if tonumber(regen) < 0 then
    regentime = math.ceil(current/(tonumber(regen)/-75)).." seconds."
  elseif tonumber(regen) == 0 then
    regentime = "Never."
  else
    regentime = math.ceil((max-current)/(tonumber(regen)/5)).." seconds."
  end
  if tonumber(regen) < 0 then
    WindowHotspotTooltip(window, "hs_tooltip", "Spending "..(tonumber(regen)*-1).." per 75 seconds.\nWill be empty in: "..regentime)
  else
    WindowHotspotTooltip(window, "hs_tooltip", "Regenerating "..regen.." per 5 seconds.\nWill be full in: "..regentime)
  end
  -- redraw the bars
  if current > 0 then
    WindowGradient (window, offset, -1, filled*energybar_width, height/2, colourBlack, colour, 2)
    WindowGradient (window, offset, height/2, filled*energybar_width, height+1, colour, colourBlack, 2)
    WindowGradient (window, filled*energybar_width+offset, -1, filled2*energybar_width, height/2, colourBlack, colour3, 2)
    WindowGradient (window, filled*energybar_width+offset, height/2, filled2*energybar_width, height+1, colour3, colourBlack, 2)
  end -- if

  -- write the information inside
  outlined_text (colourGold, window, type, 9, 3+offset, (height-14)/2, 0)
  if (type ~= "Enemy") then
    outlined_text (colourGold, window, current..' / '..max, 9, 55+offset, (height-14)/2, 90)
    outlined_text (colourGold, window, math.ceil(percent)..'%', 9, energybar_width-3+offset, (height-14)/2, 0, true)
  else
    outlined_text (colourGold, window, math.ceil(percent)..'%', 9, 55+offset, (height-14)/2, 0)
  end

end -- draw_energy_bar

--are we unable to gain xp at the current level?
function max_level (level)
  if level==nil then return false end
  level = tonumber(level)
  return (level==50 or level==75 or level==100)
end
-- fill the score
function draw_score ()

  if msdp["CHARACTER_NAME"] == nil or msdp["LEVEL"] == nil or msdp["CLASS"] == nil then
    return
  end -- if

  -- clear the background
  check (WindowDrawImage (score_window, "score_background", 0, 0, 0, 0, 1))  -- redraw the background

  -- draw the avatar
  --check (WindowDrawImage (score_window, "avatar", 70, 50, 187, 147, 3))  -- draw it

  x_offset = score_width/2
  y_offset = 6
  text_length = outlined_text (colourGold, score_window, msdp["CHARACTER_NAME"], 12, 5, y_offset, score_width)

  y_offset = y_offset + 18
  if msdp["EMPIRE_NAME"] ~= nil and msdp["EMPIRE_RANK"] ~= nil then
    outlined_text (colourSilver, score_window, '<'..msdp["EMPIRE_RANK"]..' of '..msdp["EMPIRE_NAME"]..'>', 7, 0, y_offset, score_width)
  end -- if
  y_offset = y_offset + 14
  local territory_height = 8
  WindowMoveHotspot(score_window, "hs_terr", 0, y_offset, score_width, y_offset+territory_height)
  if msdp["EMPIRE_TERRITORY"] ~= nil and msdp["EMPIRE_TERRITORY_MAX"] ~= nil then
    draw_mini_bar(0xaa00aa, 0x330033, score_window, 0, y_offset, score_width, territory_height/2, msdp["EMPIRE_TERRITORY"], msdp["EMPIRE_TERRITORY_MAX"])
  end
  y_offset = y_offset + territory_height/2
  if msdp["EMPIRE_TERRITORY_OUTSIDE"] ~= nil and msdp["EMPIRE_TERRITORY_OUTSIDE_MAX"] ~= nil then
    draw_mini_bar(0xaaaaaa, 0x333333, score_window, 0, y_offset, score_width, 3, msdp["EMPIRE_TERRITORY_OUTSIDE"], msdp["EMPIRE_TERRITORY_OUTSIDE_MAX"])
  end
  if msdp["EMPIRE_TERRITORY"] ~= nil and msdp["EMPIRE_TERRITORY_MAX"] ~= nil and msdp["EMPIRE_TERRITORY_OUTSIDE"] ~= nil and msdp["EMPIRE_TERRITORY_OUTSIDE_MAX"] ~= nil then
    local territory = tonumber(msdp["EMPIRE_TERRITORY"])
	local maxterritory = tonumber(msdp["EMPIRE_TERRITORY_MAX"])
	local outside = tonumber(msdp["EMPIRE_TERRITORY_OUTSIDE"])
	local maxoutside = tonumber(msdp["EMPIRE_TERRITORY_OUTSIDE_MAX"])
	local territoryfree = maxterritory-territory
	local outsidefree = maxoutside - outside
	local tooltip = "Total territory: "..territory.."/"..maxterritory.." ("..math.floor(territory/maxterritory*100).."%) - "..territoryfree.." left.\n"
	local tooltip = tooltip.."Outside territory: "..outside.."/"..maxoutside.." ("..math.floor(outside/maxoutside*100).."%) - "..outsidefree.." left."
    WindowHotspotTooltip(score_window, "hs_terr", tooltip)
  end
  y_offset = y_offset + territory_height/2
--  text_line = 'Level '..msdp["LEVEL"]..' '..msdp["RACE"]..' '..msdp["CLASS"]
  text_line = 'Level '..msdp["LEVEL"]..' '..msdp["CLASS"]
  outlined_text (colourGold, score_window, text_line, 10, 5, y_offset, score_width)

  --y_offset = y_offset + 145
    y_offset = y_offset + 80
  if not no_blood then
    y_offset = y_offset + 20
  end
  
  outlined_text (colourGold, score_window, "Str:", 9, 5, y_offset, 0)
  WindowMoveHotspot(score_window, "hs_str", 0, y_offset, x_offset-40, y_offset+12)
  WindowHotspotTooltip(score_window, "hs_str", "Not working properly.")
  if msdp["STR"] ~= nil and msdp["STR_PERM"] ~= nil then
    WindowHotspotTooltip(score_window, "hs_str", "Min: 1. Base: "..msdp["STR_PERM"]..". Max: 15.\nProviding +"..msdp["STR"].." physical damage.")
    colour = colourSilver
    --convert to numbers to allow comparison
    str = tonumber(msdp["STR"])
    str_perm = tonumber(msdp["STR_PERM"])
    if str<str_perm then colour = colourRed elseif str>str_perm then colour = colourGreen end
    outlined_text (colour, score_window, msdp["STR"], 9, 70, y_offset, 0, true)
  end -- if

  outlined_text (colourGold, score_window, "To-hit:", 9, x_offset, y_offset, 0)
  WindowMoveHotspot(score_window, "hs_tohit", x_offset, y_offset, score_width-40, y_offset+12)
  if msdp["TO_HIT"] ~= nil then
    if msdp["LEVEL"] ~= nil and msdp["DEX"] ~= nil and msdp["DODGE"] ~= nil then
      --calculate fun stats
      local tohit_self = math.min(95, math.max(5, tonumber(msdp["TO_HIT"])-tonumber(msdp["DODGE"])))
      local trash_dodge = math.ceil(math.max(0, tonumber(msdp["LEVEL"]) - 50) + (tonumber(msdp["LEVEL"]) * 0.1))
      local trash_dex = math.min(15, math.max(0, math.ceil(tonumber(msdp["LEVEL"])*20)))
      local tohit_trash = math.min(100, math.max(5, 5*(trash_dex-tonumber(msdp["DEX"]))+(tonumber(msdp["TO_HIT"])-trash_dodge)))
      local boss_dodge = math.ceil((math.max(0, tonumber(msdp["LEVEL"]) - 50) + (tonumber(msdp["LEVEL"]) * 0.1))*1.43)
      local boss_dex = math.min(15, math.max(0, math.ceil(msdp["LEVEL"]*20*1.25+1.25+2)))
      local tohit_boss = math.min(100, math.max(5, 5*(boss_dex-tonumber(msdp["DEX"]))+(tonumber(msdp["TO_HIT"])-boss_dodge)))
      WindowHotspotTooltip(score_window, "hs_tohit", "Chance to hit yourself: "..tohit_self.."%\nChance to hit trash (your level): "..tohit_trash.."%\nChance to hit boss (your level): "..tohit_boss.."%")
    end
    outlined_text (colourSilver, score_window, msdp["TO_HIT"], 9, 65+x_offset, y_offset, 0)
  end -- if

  y_offset = y_offset + 20
  outlined_text (colourGold, score_window, "Dex:", 9, 5, y_offset, 0)
  WindowMoveHotspot(score_window, "hs_dex", 0, y_offset, x_offset-40, y_offset+12)
  if msdp["DEX"] ~= nil and msdp["DEX_PERM"] ~= nil then
    WindowHotspotTooltip(score_window, "hs_dex", "Min: 0. Base: "..msdp["DEX_PERM"]..". Max: 15.\nProviding +"..(tonumber(msdp["DEX"])*5).." To-hit & Dodge.")
    colour = colourSilver
    --convert to numbers to allow comparison
    dex = tonumber(msdp["DEX"])
    dex_perm = tonumber(msdp["DEX_PERM"])
    if dex<dex_perm then colour = colourRed elseif dex>dex_perm then colour = colourGreen end
    outlined_text (colour, score_window, msdp["DEX"], 9, 70, y_offset, 0, true)
  end -- if

  outlined_text (colourGold, score_window, "Dodge:", 9, x_offset, y_offset, 0)
  WindowMoveHotspot(score_window, "hs_dodge", x_offset, y_offset, score_width-40, y_offset+12)
  if msdp["DODGE"] ~= nil then
    if msdp["LEVEL"] ~= nil and msdp["DEX"] ~= nil and msdp["TO_HIT"] ~= nil then
      --calculate fun stats
      local tododge_self = math.min(95, math.max(0, tonumber(msdp["DODGE"])-tonumber(msdp["TO_HIT"])+100))
      local trash_tohit = math.ceil(math.max(0, tonumber(msdp["LEVEL"]) - 50) + (tonumber(msdp["LEVEL"]) * 0.1))+50
      local trash_dex = math.min(15, math.max(0, math.ceil(tonumber(msdp["LEVEL"])*20)))
      local tododge_trash = math.min(75, math.max(0, 5*(trash_dex-tonumber(msdp["DEX"]))+(tonumber(msdp["DODGE"])-trash_tohit)))
      local boss_tohit = math.ceil((math.max(0, tonumber(msdp["LEVEL"]) - 50) + (tonumber(msdp["LEVEL"]) * 0.1))*1.43)+50
      local boss_dex = math.min(15, math.max(0, math.ceil(msdp["LEVEL"]*20*1.25+1.25+2)))
      local tododge_boss = math.min(75, math.max(0, 5*(boss_dex-tonumber(msdp["DEX"]))+(tonumber(msdp["DODGE"])-boss_tohit)))
      WindowHotspotTooltip(score_window, "hs_dodge", "Chance to dodge yourself: "..tododge_self.."%\nChance to dodge trash (your level): "..tododge_trash.."%\nChance to dodge boss (your level): "..tododge_boss.."%")
	end
    outlined_text (colourSilver, score_window, msdp["DODGE"], 9, 65+x_offset, y_offset, 0)
  end -- if

  y_offset = y_offset + 20
  outlined_text (colourGold, score_window, "Int:", 9, 5, y_offset, 0)
  WindowMoveHotspot(score_window, "hs_int", 0, y_offset, x_offset-40, y_offset+12)
  if msdp["INT"] ~= nil and msdp["INT_PERM"] ~= nil then
    WindowHotspotTooltip(score_window, "hs_int", "Min: 1. Base: "..msdp["INT_PERM"]..". Max: 15.\nProviding +"..msdp["INT"].." magical damage.")
    colour = colourSilver
    --convert to numbers to allow comparison
    int = tonumber(msdp["INT"])
    int_perm = tonumber(msdp["INT_PERM"])
    if int<int_perm then colour = colourRed elseif int>int_perm then colour = colourGreen end
    outlined_text (colour, score_window, msdp["INT"], 9, 70, y_offset, 0, true)
  end -- if

  outlined_text (colourGold, score_window, "Block:", 9, x_offset, y_offset, 0)
  WindowMoveHotspot(score_window, "hs_block", x_offset, y_offset, score_width-40, y_offset+12)
  if msdp["BLOCK"] ~= nil then
    if msdp["LEVEL"] ~= nil then
      --calculate fun stats
      local target_trash = (tonumber(msdp["LEVEL"])/2)-50
      local toblock_trash = math.max(0, math.min(tonumber(msdp["BLOCK"] - target_trash), 50))
      local target_boss = (tonumber(msdp["LEVEL"])/2*1.43)-50
      local toblock_boss = math.max(0, math.min(tonumber(msdp["BLOCK"] - target_boss), 50))
      WindowHotspotTooltip(score_window, "hs_block", "Chance to block trash (your level): "..toblock_trash.."%\nChance to block boss (your level): "..toblock_boss.."%")
    end
    outlined_text (colourSilver, score_window, msdp["BLOCK"], 9, 65+x_offset, y_offset, 0)
  end -- if

  y_offset = y_offset + 20
  outlined_text (colourGold, score_window, "Wit:", 9, 5, y_offset, 0)
  WindowMoveHotspot(score_window, "hs_wit", 0, y_offset, x_offset-40, y_offset+12)
  if msdp["WIT"] ~= nil and msdp["WIT_PERM"] ~= nil then
    WindowHotspotTooltip(score_window, "hs_wit", "Min: 0. Base: "..msdp["WIT_PERM"]..". Max: 15.\nProviding "..(tonumber(msdp["WIT"])*0.025*100).."% faster attack speed.")
    colour = colourSilver
    wit = tonumber(msdp["WIT"])
    wit_perm = tonumber(msdp["WIT_PERM"])
    if wit<wit_perm then colour = colourRed elseif wit>wit_perm then colour = colourGreen end
    outlined_text (colour, score_window, msdp["WIT"], 9, 70, y_offset, 0, true)
  end -- if
  
  outlined_text (colourGold, score_window, "Resist: ", 9, x_offset, y_offset, 0)
  WindowMoveHotspot(score_window, "hs_resist", x_offset, y_offset, score_width-40, y_offset+12)
  if msdp["RESIST_PHYSICAL"] ~= nil and msdp["RESIST_MAGICAL"] ~= nil then
    if msdp["LEVEL"] ~= nil then
      --calculate fun stats
      local max_resist = tonumber(msdp["LEVEL"])/2
      local phys = tonumber(msdp["RESIST_PHYSICAL"])
      local magic = tonumber(msdp["RESIST_MAGICAL"])
	  local resisted_p = 0
	  local resisted_m = 0
      if tonumber(phys)>max_resist/2 then
	    local use_resist = math.min(max_resist, phys)
        resisted_p = ((use_resist - (max_resist/2.0)) / (max_resist / 2.0))/4
      end
      if tonumber(magic)>max_resist/2 then
	    local use_resist = math.min(max_resist, magic)
        resisted_m = ((use_resist - (max_resist/2.0)) / (max_resist / 2.0))/4
      end
      WindowHotspotTooltip(score_window, "hs_resist", "Physical resistance (at your level): "..(resisted_p*100).."%\nMagical resistance (at your level): "..(resisted_m*100).."%")
    end
    outlined_text (colourSilver, score_window, msdp["RESIST_PHYSICAL"]..'|'..msdp["RESIST_MAGICAL"], 9, 65+x_offset, y_offset, 0)
  end -- if

  y_offset = y_offset + 20
  outlined_text (colourGold, score_window, "Cha:", 9, 5, y_offset, 0)
  WindowMoveHotspot(score_window, "hs_cha", 0, y_offset, x_offset-40, y_offset+12)
  if msdp["CHA"] ~= nil and msdp["CHA_PERM"] ~= nil then
    WindowHotspotTooltip(score_window, "hs_cha", "Min: 1. Base: "..msdp["CHA_PERM"]..". Max: 15.")
    colour = colourSilver
	cha = tonumber(msdp["CHA"])
	cha_perm = tonumber(msdp["CHA_PERM"])
    if cha<cha_perm then colour = colourRed elseif cha>cha_perm then colour = colourGreen end
    outlined_text (colour, score_window, msdp["CHA"], 9, 70, y_offset, 0, true)
  end -- if

  outlined_text (colourGold, score_window, "+", 9, x_offset-15, y_offset, 0)
  outlined_text (colourGold, score_window, "Phys:", 9, x_offset, y_offset, 0)
  outlined_text (colourGold, score_window, "Magic:", 9, x_offset, y_offset, (score_width-5)-x_offset)
  outlined_text (colourGold, score_window, "Heal:", 9, score_width-3, y_offset, 0, true)
  if msdp["BONUS_PHYSICAL"] ~= nil and msdp["BONUS_MAGICAL"] ~= nil and msdp["BONUS_HEALING"] ~= nil then
    --outlined_text (colourSilver, score_window, msdp["BONUS_PHYSICAL"]..'p '..msdp["BONUS_MAGICAL"]..'m '..msdp["BONUS_HEALING"]..'h', 9, x_offset, 20+y_offset, 0)
    outlined_text (colourSilver, score_window, msdp["BONUS_PHYSICAL"], 9, x_offset+5, 20+y_offset, 0)
	outlined_text (colourSilver, score_window, msdp["BONUS_MAGICAL"], 9, x_offset, 20+y_offset, (score_width-5)-x_offset)
    outlined_text (colourSilver, score_window, msdp["BONUS_HEALING"], 9, score_width-8, 20+y_offset, 0, true)
  end -- if
  
  y_offset = y_offset + 20
  outlined_text (colourGold, score_window, "Grt:", 9, 5, y_offset, 0)
  WindowMoveHotspot(score_window, "hs_grt", 0, y_offset, x_offset-40, y_offset+12)
  if msdp["GRT"] ~= nil and msdp["GRT_PERM"] ~= nil then
    WindowHotspotTooltip(score_window, "hs_grt", "Min: 0. Base: "..msdp["GRT_PERM"]..". Max: 15.\nProviding +"..(tonumber(msdp["GRT"])*35).." territory.")
    colour = colourSilver
	grt = tonumber(msdp["GRT"])
	grt_perm = tonumber(msdp["GRT_PERM"])
    if grt<grt_perm then colour = colourRed elseif grt>grt_perm then colour = colourGreen end
    outlined_text (colour, score_window, msdp["GRT"], 9, 70, y_offset, 0, true)
  end -- if
  
  y_offset = y_offset + 20
  
  colourNormal1 = 0x00AAAA
  colourNormal2 = 0x003333
  colourMax1 = 0x00AA00
  colourMax2 = 0x003300
  local spacing = xpbar_height+2 + 0
  if msdp["BATTLE_EXP"] ~= nil and msdp["BATTLE_LEVEL"] ~= nil then
    if tonumber(msdp["BATTLE_LEVEL"])>0 or tonumber(msdp["BATTLE_EXP"])>0 then
      if max_level(msdp["BATTLE_LEVEL"]) then colour = colourMax1 colour2 = colourMax2 else colour = colourNormal1 colour2 = colourNormal2 end
      draw_xp_bar ("Battle", colour, colour2, score_window, (score_width-xpbar_width)/2, y_offset, msdp["BATTLE_EXP"], 100, msdp["BATTLE_LEVEL"])
      y_offset = y_offset + spacing
	end
  end
  if msdp["EMPIRE_EXP"] ~= nil and msdp["EMPIRE_LEVEL"] ~= nil then
    if tonumber(msdp["EMPIRE_LEVEL"])>0 or tonumber(msdp["EMPIRE_EXP"])>0 then
      if max_level(msdp["EMPIRE_LEVEL"]) then colour = colourMax1 colour2 = colourMax2 else colour = colourNormal1 colour2 = colourNormal2 end
      draw_xp_bar ("Empire", colour, colour2, score_window, (score_width-xpbar_width)/2, y_offset, msdp["EMPIRE_EXP"], 100, msdp["EMPIRE_LEVEL"])
      y_offset = y_offset + spacing
	end
  end
  if msdp["HIGH_SORCERY_EXP"] ~= nil and msdp["HIGH_SORCERY_LEVEL"] ~= nil then
    if tonumber(msdp["HIGH_SORCERY_LEVEL"])>0 or tonumber(msdp["HIGH_SORCERY_EXP"])>0 then
      if max_level(msdp["HIGH_SORCERY_LEVEL"]) then colour = colourMax1 colour2 = colourMax2 else colour = colourNormal1 colour2 = colourNormal2 end
      draw_xp_bar ("High Sorcery", colour, colour2, score_window, (score_width-xpbar_width)/2, y_offset, msdp["HIGH_SORCERY_EXP"], 100, msdp["HIGH_SORCERY_LEVEL"])
      y_offset = y_offset + spacing
	end
  end
  if msdp["NATURAL_MAGIC_EXP"] ~= nil and msdp["NATURAL_MAGIC_LEVEL"] ~= nil then
    if tonumber(msdp["NATURAL_MAGIC_LEVEL"])>0 or tonumber(msdp["NATURAL_MAGIC_EXP"])>0 then
      if max_level(msdp["NATURAL_MAGIC_LEVEL"]) then colour = colourMax1 colour2 = colourMax2 else colour = colourNormal1 colour2 = colourNormal2 end
      draw_xp_bar ("Natural Magic", colour, colour2, score_window, (score_width-xpbar_width)/2, y_offset, msdp["NATURAL_MAGIC_EXP"], 100, msdp["NATURAL_MAGIC_LEVEL"])
      y_offset = y_offset + spacing
	end
  end
  if msdp["STEALTH_EXP"] ~= nil and msdp["STEALTH_LEVEL"] ~= nil then
    if tonumber(msdp["STEALTH_LEVEL"])>0 or tonumber(msdp["STEALTH_EXP"])>0 then
      if max_level(msdp["STEALTH_LEVEL"]) then colour = colourMax1 colour2 = colourMax2 else colour = colourNormal1 colour2 = colourNormal2 end
      draw_xp_bar ("Stealth", colour, colour2, score_window, (score_width-xpbar_width)/2, y_offset, msdp["STEALTH_EXP"], 100, msdp["STEALTH_LEVEL"])
      y_offset = y_offset + spacing
	end
  end
  if msdp["SURVIVAL_EXP"] ~= nil and msdp["SURVIVAL_LEVEL"] ~= nil then
    if tonumber(msdp["SURVIVAL_LEVEL"])>0 or tonumber(msdp["SURVIVAL_EXP"])>0 then
      if max_level(msdp["SURVIVAL_LEVEL"]) then colour = colourMax1 colour2 = colourMax2 else colour = colourNormal1 colour2 = colourNormal2 end
      draw_xp_bar ("Survival", colour, colour2, score_window, (score_width-xpbar_width)/2, y_offset, msdp["SURVIVAL_EXP"], 100, msdp["SURVIVAL_LEVEL"])
      y_offset = y_offset + spacing
	end
  end
  if msdp["TRADE_EXP"] ~= nil and msdp["TRADE_LEVEL"] ~= nil then
    if tonumber(msdp["TRADE_LEVEL"])>0 or tonumber(msdp["TRADE_EXP"])>0 then
      if max_level(msdp["TRADE_LEVEL"]) then colour = colourMax1 colour2 = colourMax2 else colour = colourNormal1 colour2 = colourNormal2 end
      draw_xp_bar ("Trade", colour, colour2, score_window, (score_width-xpbar_width)/2, y_offset, msdp["TRADE_EXP"], 100, msdp["TRADE_LEVEL"])
      y_offset = y_offset + spacing
	end
  end
  if msdp["VAMPIRE_EXP"] ~= nil and msdp["VAMPIRE_LEVEL"] ~= nil then
    if tonumber(msdp["VAMPIRE_LEVEL"])>0 or tonumber(msdp["VAMPIRE_EXP"])>0 then
      if max_level(msdp["VAMPIRE_LEVEL"]) then colour = colourMax1 colour2 = colourMax2 else colour = colourNormal1 colour2 = colourNormal2 end
      draw_xp_bar ("Vampire", colour, colour2, score_window, (score_width-xpbar_width)/2, y_offset, msdp["VAMPIRE_EXP"], 100, msdp["VAMPIRE_LEVEL"])
      y_offset = y_offset + spacing
	  WindowShow(blood_window, true) --just in case
	  no_blood = false
	else
	  WindowShow(blood_window, false) --hide the blood bar
	  no_blood = true
    end
  end
  right = GetInfo (281) + right_offset
  bottom = GetInfo (280) + bottom_offset
  draw_cooldowns(right+34, top+y_offset+11)

end -- draw_score


local AffectName = {}
local AffectDuration = {}
local AffectMax = 0

function init_affects (data)

  index = 0
  startpos = 1
  max = 0
  for i=startpos,string.len(data),1 do
    if string.byte(data,i) == 1 or i == string.len(data) then
      if string.byte(data,i) == 1 then
        endpos = 1
      else
        endpos = 0
      end -- if
      variable = string.sub(data,startpos,i-endpos)
      startpos = i+1
      index = index + 1

      pos1 = string.find(variable, "\002")
      if pos1 ~= nil then
        AffectName[index] = string.sub(variable, 1, pos1-1)
        AffectDuration[index] = string.sub(variable, pos1+1)
      end -- if
    end -- if
  end -- for

  -- AffectMax is the highest EVER number - we need to keep track of all created icons
  if index < AffectMax then
    for i=index+1,AffectMax,1 do
      AffectName[i] = nil
      win = affect_window_prefix..i
      WindowShow (win, false)
    end -- for
    AffectMax = index
  elseif index > AffectMax then
    AffectMax = index
  end -- if
end --function
local CooldownName = {}
local CooldownDuration = {}
local CooldownMax = 0
  
function init_cooldowns (data)

  index = 0
  startpos = 1
  max = 0
  for i=startpos,string.len(data),1 do
    if string.byte(data,i) == 1 or i == string.len(data) then
      if string.byte(data,i) == 1 then
        endpos = 1
      else
        endpos = 0
      end -- if
      variable = string.sub(data,startpos,i-endpos)
      startpos = i+1
      index = index + 1

      pos1 = string.find(variable, "\002")
      if pos1 ~= nil then
        CooldownName[index] = string.sub(variable, 1, pos1-1)
        CooldownDuration[index] = string.sub(variable, pos1+1)
      end -- if
    end -- if
  end -- for

  -- CooldownMax is the highest EVER number - we need to keep track of all created icons
  if index < CooldownMax then
    for i=index+1,CooldownMax,1 do
      CooldownName[i] = nil
      win = cooldown_window_prefix..i
      WindowShow (win, false)
    end -- for
    CooldownMax = index
  elseif index > CooldownMax then
    CooldownMax = index
  end -- if  
end -- function

function seconds_to_minutes(seconds)
  minutes = math.floor(seconds/60)
  seconds = seconds-minutes*60
  if minutes>0 then
    if seconds<9 then seconds = "0"..seconds end --:0 becomes :00
    return minutes..":"..seconds
  else
    return seconds
  end
end

function draw_cooldowns (startx, starty)
  cooldowns = msdp["COOLDOWNS"]
  if cooldowns == nil or cooldowns == "None" then
    for i=1,CooldownMax,1 do
      WindowShow (cooldown_window_prefix..i, false)
    end -- for
    CooldownMax = 0
    return
  end -- if


  init_cooldowns (cooldowns)
  offset_x = 0
  offset_y = 0

  for i=1,CooldownMax,1 do
    if CooldownName[i] ~= nil then
      win = cooldown_window_prefix..i
      cooldown = "cooldown_"..i

      -- draw the icons left to right, top to bottom
      if i > 1 then
        if offset_x == 0 then
          offset_x = 36
        elseif offset_x == 36 then
          offset_x = 72
        elseif offset_x == 72 then
          offset_x = 108
        else
          offset_x = 0
          offset_y = offset_y + 36
        end -- if
      end -- if

      colour = colourGold

      -- make a miniwindow under the text
      check (WindowCreate (win,   -- window ID
                    startx+offset_x,  -- left, GetInfo(281)-320-39
                    starty+offset_y, -- top, 73
                    34,           -- width
                    34,           -- depth
                    12,           -- center it (ignored anyway) 
                    2,            -- draw underneath (1) + absolute location (2)
                    colourBlack))      -- background colour
      WindowSetZOrder (win, 21)
      -- load the icon
      if WindowLoadImage (win, cooldown, GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/cooldowns/" .. CooldownName[i] .. ".png") == eOK then
        check (WindowDrawImage (win, cooldown, 1, 1, 33, 33, 2))  -- draw the icon
      elseif WindowLoadImage (win, cooldown, GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/cooldowns/default.png") == eOK then
        check (WindowDrawImage (win, cooldown, 1, 1, 33, 33, 2))  -- draw the default icon instead
      else -- even the default spell icon is missing
        Note( "Missing spell icons.")
        return
      end -- if
	  
      if tonumber(CooldownDuration[i]) < 60 then
        offset = 9
      elseif tonumber(CooldownDuration[i]) < 600 then
        offset = 1
      else -- 3 digits
        offset = 0
      end -- if

      if tonumber(CooldownDuration[i]) < 0 then
        -- draw an infinity symbol
        outlined_text (colour, win, "O", 6, 4, 21, 0)
        outlined_text (colour, win, "O", 6, 9, 21, 0)
        -- go over the first 'O' again, removing the outline from the second 'O'
        WindowFont(win,'f','Times New Roman',6,1,0,0,0)
        WindowText(win,'f',"O",4,21,0,0,colour,0)
      else -- write the duration
        outlined_text (colour, win, seconds_to_minutes(tonumber(CooldownDuration[i])), 6, 4, 21, 0)
      end -- if

      -- show the window
	  if gui_on then
        WindowShow (win, true)
      end

      -- create a hotspot over the timer
      WindowAddHotspot(win, "hs_cooldown_"..i, 0, 0, 34, 34, "", "", "", "", "", CooldownName[i], 1, 0)
    end -- if
  end -- for
end --function

function draw_affects ()

  affects = msdp["AFFECTS"]
  if affects == nil or affects == "None" then
    for i=1,AffectMax,1 do
      WindowShow (affect_window_prefix..i, false)
    end -- for
    AffectMax = 0
    return
  end -- if


  init_affects (affects)
  --TEST, TEMP
  --[[AffectMax = 2
  AffectName[1] = "sanctuary"
  AffectDuration[1] = "-1"
  AffectName[2] = "hasten"
  AffectDuration[2] = "300"--]]
  offset_x = 0
  offset_y = 0

  for i=1,AffectMax,1 do
    if AffectName[i] ~= nil then
      win = affect_window_prefix..i
      affect = "affect_"..i

      -- draw the icons left to right, top to bottom
      if i > 1 then
        if offset_x == 0 then
--[[
          offset_x = 36
        elseif offset_x == 36 then
          offset_x = 72
        elseif offset_x == 72 then
          offset_x = 108
        else
          offset_x = 0
--]]
          offset_y = offset_y + 36
        end -- if
      end -- if

      colour = colourGold

      -- make a miniwindow under the text
      check (WindowCreate (win,   -- window ID
                    GetInfo(281)-320-5+offset_x,  -- left, 14
                    73+10+offset_y, -- top, 383
                    34,           -- width
                    34,           -- depth
                    12,           -- center it (ignored anyway) 
                    2,            -- draw underneath (1) + absolute location (2)
                    colourBlack))      -- background colour
      WindowSetZOrder (win, 21)
      -- load the icon
      if WindowLoadImage (win, affect, GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/affects/" .. AffectName[i] .. ".png") == eOK then
        check (WindowDrawImage (win, affect, 1, 1, 33, 33, 2))  -- draw the icon
      elseif WindowLoadImage (win, affect, GetInfo (66) .. "EmpireMUD GUI/EmpireHUD/affects/default.png") == eOK then
        check (WindowDrawImage (win, affect, 1, 1, 33, 33, 2))  -- draw the default icon instead
      else -- even the default spell icon is missing
        Note( "Missing spell icons.")
        return
      end -- if

      if tonumber(AffectDuration[i]) < 60 then
        offset = 9
      elseif tonumber(AffectDuration[i]) < 600 then
        offset = 1
      else -- 3 digits
        offset = 0
      end -- if

      if tonumber(AffectDuration[i]) < 0 then
        -- draw an infinity symbol
        outlined_text (colour, win, "O", 6, 4, 21, 0)
        outlined_text (colour, win, "O", 6, 9, 21, 0)
        -- go over the first 'O' again, removing the outline from the second 'O'
        WindowFont(win,'f','Times New Roman',6,1,0,0,0)
        WindowText(win,'f',"O",4,21,0,0,colour,0)
      else -- write the duration
        outlined_text (colour, win, seconds_to_minutes(tonumber(AffectDuration[i])), 6, 4, 21, 0)
      end -- if

      -- show the window
	  if gui_on then
        WindowShow (win, true)
      end

      -- create a hotspot over the timer
      WindowAddHotspot(win, "hs_affect_"..i, 0, 0, 34, 34, "", "", "", "", "", AffectName[i], 1, 0)
    end -- if
  end -- for

end -- draw_affects


function outlined_text (colour, window, text, size, x, y, centre_width, rj)
  if rj == nil then rj = false end
  outlineColour = colourBlack

  -- write the information inside
  WindowFont(window,'f','Verdana',size,1,0,0,0)
  if rj then
    if centre_width > 0 then
      --right justify within the box
      width = WindowTextWidth (window, 'f', text)
	  x = x + centre_width-width
	else
	  --right justify in general
      width = WindowTextWidth (window, 'f', text)
	  x = x - width
	end
  elseif centre_width > 0 then
    width = WindowTextWidth (window, 'f', text)
    x = x + ((centre_width-width) / 2)
  end -- if

  -- smear black text around the location to create an outline, so that it's clearer to read
  WindowText(window,'f',text,x+1,y+1,0,0,outlineColour,0)
  WindowText(window,'f',text,x+1,y,0,0,outlineColour,0)
  WindowText(window,'f',text,x+1,y-1,0,0,outlineColour,0)
  WindowText(window,'f',text,x,y+1,y,0,outlineColour,0)
  WindowText(window,'f',text,x,y-1,y,0,outlineColour,0)
  WindowText(window,'f',text,x-1,y+1,0,0,outlineColour,0)
  WindowText(window,'f',text,x-1,y,0,0,outlineColour,0)
  WindowText(window,'f',text,x-1,y-1,0,0,outlineColour,0)

  -- display the text
  WindowText(window,'f',text,x,y,0,0,colour,0)

  return width
end -- outlined_text


-- MSDP negotiation
local MSDP = 69

function OnPluginTelnetRequest (type, data)
  if type == MSDP and data == "WILL" then
    using_msdp = true
    return true
  elseif type == MSDP and data == "SENT_DO" then
    -- IAC SB MSDP response IAC SE 
    -- Split up for readability...
	Basic = "\2CHARACTER_NAME\2CLASS\2LEVEL\2ROOM_EXITS\2AFFECTS\2COOLDOWNS" --name class level exits affects
	Primary = "\2STR\2INT\2WIT\2DEX\2CHA\2GRT\2STR_PERM\2INT_PERM\2WIT_PERM\2DEX_PERM\2CHA_PERM\2GRT_PERM" --6 primary stats
	Secondary = "\2TO_HIT\2DODGE\2BLOCK\2RESIST_PHYSICAL\2RESIST_MAGICAL\2BONUS_PHYSICAL\2BONUS_MAGICAL\2BONUS_HEALING" --the secondary stats
	Skills = "\2BATTLE_EXP\2EMPIRE_EXP\2HIGH_SORCERY_EXP\2NATURAL_MAGIC_EXP\2STEALTH_EXP\2SURVIVAL_EXP\2TRADE_EXP\2VAMPIRE_EXP"
	Skills = Skills.."\2BATTLE_LEVEL\2EMPIRE_LEVEL\2HIGH_SORCERY_LEVEL\2NATURAL_MAGIC_LEVEL\2STEALTH_LEVEL\2SURVIVAL_LEVEL\2TRADE_LEVEL\2VAMPIRE_LEVEL"
	Bars = "\2HEALTH_MAX\2HEALTH_REGEN\2HEALTH\2MANA_MAX\2MANA_REGEN\2MANA\2MOVEMENT_MAX\2MOVEMENT_REGEN\2MOVEMENT\2BLOOD\2BLOOD_MAX\2BLOOD_UPKEEP" --health mana move blood
	Other = "\2EMPIRE_RANK\2EMPIRE_NAME\2EMPIRE_TERRITORY\2EMPIRE_TERRITORY_MAX\2EMPIRE_TERRITORY_OUTSIDE\2EMPIRE_TERRITORY_OUTSIDE_MAX\2OPPONENT_HEALTH" --more stuff
	
    Start = "\255\250\69\1REPORT"
	Mid = Basic..Primary..Secondary..Bars..Skills..Other
	End = "\2\255\240"
	--
    SendPkt (Start..Mid..End)
    return true
  else -- another protocol
    return false
  end -- if
end -- function OnPluginTelnetRequest

function OnPluginTelnetSubnegotiation (type, data)
  if type == MSDP then
    endpos = string.len(data)
    bName = false
    bValue = false
    bTable = false
    bIgnore = false
    variable = nil
    value = nil

--Note('Raw data: ['..data..']')

    for i=1,endpos,1 do
      if string.byte(data,i) == 1 and bTable == false then
        if variable ~= nil and value ~= nil then
          StoreVariable(variable, value)
          variable = nil
          value = nil
        end -- if
        bName = true
        bValue = false
      elseif string.byte(data,i) == 2 and bTable == false then
        if value ~= nil then
          value = value.." "
        end -- if
        bName = false
        bValue = true
      elseif string.byte(data,i) == 3 then
        bTable = true
        bIgnore = true
      elseif string.byte(data,i) == 4 then
        bTable = false
      elseif bIgnore == true then
        bIgnore = false -- Just ignore one character.
      elseif bName == true then
        if variable == nil then
          variable = ""
        end -- if
        variable = variable..string.sub(data,i,i)
      elseif bValue == true then
        if value == nil then
          value = ""
        end -- if
        value = value..string.sub(data,i,i)
      end -- if
    end -- for

    if variable ~= nil then
      if value == nil then
        value = ""
      end -- if
      StoreVariable(variable, value)
    end -- if

    --  redraw the map
    --draw_minimap ()

    -- redraw the score sheet
    draw_score ()

    -- redraw the energy bars
    draw_energy_bars ()

    -- redraw the spell affect icons
    draw_affects ()
    
    Redraw()

  end -- if
end -- function OnPluginTelnetSubnegotiation

function StoreVariable (MSDP_var, MSDP_val)
--Note('Variable: '..MSDP_var..' = ['..MSDP_val..']')
  if MSDP_var == "SERVER_ID" then
    create_layout ()
    SendPkt ("\255\250\69\1PLUGIN_ID\2MUSHclient UI for EmpireMUD (version 0.3)\255\240")
  else -- store the variable
    msdp[MSDP_var] = MSDP_val
  end -- if
end -- function StoreVariable

]]>
</script>

</muclient>
